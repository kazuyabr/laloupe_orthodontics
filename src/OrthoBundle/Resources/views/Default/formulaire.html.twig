{# @OrthoBundle/Resources/views/Default/formulaire.html.twig #}
{% extends 'base.html.twig' %}
{% block body %}
    <h3 xmlns="http://www.w3.org/1999/html">{{ actualUser[0].nomCab }}, {{ actualUser[0].adresseCab }}
        , {{ actualUser[0].codepostalCab }} à {{ actualUser[0].villeCab }}. N° : {{ actualUser[0].telephoneCab }}</h3>
    <form id="msform" action="{{ path('ortho_formulaire') }}" method="post">
        <!-- Barre de progression -->
        <ul id="progressbar">
            <li class="active"></li>
            <li></li>
            <li></li>
        </ul>

        {{ form_start(form) }}
        <!-- Bloc n°1 : Les informations générales du patient -->
        <fieldset class="smallbloc">
            {{ form_label(form.referencePatient, "Référence du patient* :") }} <span id="securite_refPatient">Ce champ est obligatoire</span>
            <h2 class="fs-title">Informations du patient</h2>

            {{ form_label(form.referencePatient, "Référence du patient : ") }}
            {{ form_errors(form.referencePatient) }}
            {{ form_widget(form.referencePatient) }}

            {{ form_label(form.prenomPatient) }}
            {{ form_errors(form.prenomPatient) }}
            {{ form_widget(form.prenomPatient) }}

            {{ form_label(form.dateretour, "Date de retour souhaitée : ") }}
            {{ form_errors(form.dateretour) }}
            {{ form_widget(form.dateretour) }}

            <input type="button" name="next" class="next action-button" value="Suivant"/>
        </fieldset>

        <!-- Bloc n°2 : L'aspect technique | Appareillages & Adjonctions -->
        <fieldset class="largebloc">

            <h2 class="fs-title">Appareillages & Adjonctions</h2>
            <h3 class="fs-subtitle">Les choix dentaires à faire pour le patient</h3>

            <div id='blocApp' class='blocAppAdj'>
                {{ form_label(form.appareillages, "Appareillages : ") }}
                {{ form_errors(form.appareillages) }}
                {{ form_widget(form.appareillages) }}

                <div id="appCommentInter"></div>

                {{ form_widget(form.ajoutApp, { 'label': 'Bibilothèque Appareillages' }) }}

                <!-- Modal -->
                <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel"
                     aria-hidden="true">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>

                                <h4 class="modal-title" id="myModalLabel">Vos appareillages disponibles par
                                    famille</h4>
                                <h6>Liste non exhaustive, contactez votre laboratoire</h6>

                                <div class="modal-body">
                                    <ul>
                                        <li><a data-family="mob" class="family-button" data-toggle="modal" data-target="#myModal2">Mobile</a><br/></li>
                                        <li><a href="#" data-toggle="modal" data-family="fix" class="family-button" data-target="#myModal2">Fixe</a><br/></li>
                                        <li><a href="#" data-toggle="modal" data-target="#myModal2">Fonctionnels</a><br/>
                                        </li>
                                        <li><a href="#" data-toggle="modal" data-target="#myModal2">Contention</a><br/>
                                        </li>
                                        <li><a href="#" data-toggle="modal" data-target="#myModal2">Service 3D</a><br/>
                                        </li>
                                        <li><a href="#" data-toggle="modal" data-target="#myModal2">Moulages</a><br/>
                                        </li>
                                        <li><a href="#" data-toggle="modal"
                                               data-target="#myModal2">Elastodontie</a><br/>
                                        </li>
                                        <li><a href="#" data-toggle="modal" data-target="#myModal2">Pédodontie</a><br/>
                                        </li>
                                        <li><a href="#" data-toggle="modal" data-target="#myModal2">Collage
                                                Indirect</a><br/></li>
                                        <li><a href="#" data-toggle="modal" data-target="#myModal2">Autres</a><br/></li>
                                    </ul>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Fermer</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal fade" id="myModal2" tabindex="-1" role="dialog" aria-labelledby="myModalLabel"
                         aria-hidden="true">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                    <div class="input-group stylish-input-group">
                                        <input type="text" class="form-control quicksearch" placeholder="Entrez votre recherche" id="search">
                                        <span class="input-group-addon">
                                            <button type="submit">
                                                <span class="glyphicon glyphicon-search"></span>
                                            </button>
                                        </span>
                                    </div>
                                    <h4 class="modal-title" id="myModalLabel">Selectionnez le modèle d'appareil</h4>
                                </div>
                                <div class="modal-body">
                                    Sélectionnez votre appareillage : <br/>
                                    <div class="container">
                                        <div class="row">
                                            <div class="col-xs-6">
                                                <div class="row" id="images-app">
                                                    <!-- Ici, on insère dans la div les appareillages (voir jQuery) -->
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Fermer</button>
                                    <button type="submit" class="btn btn-primary">Valider</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id='blocAdj' class='blocAppAdj'>
                {{ form_label(form.fidAdj, "Adjonctions : ") }}
                {{ form_errors(form.fidAdj) }}
                {{ form_widget(form.fidAdj) }}

                {{ form_widget(form.ajoutAdj, { 'label': 'Bibliothèque Adjonctions' }) }}
            </div>
            <div id="coulmot">
                {{ form_label(form.fidCouleur, "Couleur : ") }}
                {{ form_errors(form.fidCouleur) }}
                {{ form_widget(form.fidCouleur) }}
                <img id="remplissageCadreCouleur" src="{{ asset('bundles/ortho/img/couleurs/1.png') }}"/>

                {{ form_label(form.fidMotif, "Motif :") }}
                {{ form_errors(form.fidMotif) }}
                {{ form_widget(form.fidMotif) }}
                <img id="remplissageCadreMotif" src="{{ asset('bundles/ortho/img/motifs/1.png') }}"/>
            </div>

            {{ form_label(form.comment, "Commentaires : ") }}
            {{ form_errors(form.comment) }}
            {{ form_widget(form.comment) }}
            <input type="button" name="previous" class="previous action-button" value="Précédent"/>
            <input type="button" name="next" class="next action-button" value="Suivant"/>
        </fieldset>
        <!-- Bloc n°3 : Les pièces jointes -->
        <fieldset class="smallbloc">
            <h2 class="fs-title">Pièces jointes complémentaires :</h2>
            <h3 class="fs-subtitle">Toutes les pièces jointes à apporter à la commande :</h3>

            {{ form_label(form.testimage, "Arcade Maxilaire :") }}
            {{ form_errors(form.testimage) }}
            {{ form_widget(form.testimage) }}

            {{ form_label(form.testimage1, "Arcade mandibulaire :") }}
            {{ form_errors(form.testimage1) }}
            {{ form_widget(form.testimage1) }}

            {{ form_label(form.testimage2, "Autre pièces jointes :") }}
            {{ form_errors(form.testimage2) }}
            {{ form_widget(form.testimage2) }}

            {{ form_label(form.comment2, "Autres commentaires :") }}
            {{ form_errors(form.comment2) }}
            {{ form_widget(form.comment2) }}

            {{ form_rest(form) }}
            {{ form_end(form) }}

            <input type="button" name="previous" class="previous action-button" value="Précédent"/>
            <input type="submit" name="previous" class="action-button" value="ENVOYER"/>
        </fieldset>
    </form>
{% endblock %}

{% block javascript %}
    <script>
        // Liste des appareillages | Affichage des commentaires dans le cadre
        var tableau = {
        {% for commentaire in commentaireAppareil %}
        {{ commentaire['id'] }} :
        "{{ commentaire['titreApp'] }} ({{ commentaire['familleApp'] }}) : \n{{ commentaire['commentairesApp'] }}" ,
        {% endfor %}
        }
        var commentAppareil = $('#appCommentInter');
        var checkboxes = $('div#commandes_appareillages input[type=checkbox]');

        checkboxes.on('click', function () {
            if ($(this).prop('checked')) {
                commentAppareil.append('<div class="commentaireClass" id="commentaireEnfant' + $(this).val() + '">' + tableau[$(this).val()] + '</div>');
            }
            else {
                $('#commentaireEnfant' + $(this).val()).remove();
            }

            $('#commandes_comment').html('');

            $('.commentaireClass').each(function () {
                $('#commandes_comment').append($(this).html() + "\n");
            });
        });

        var monSelectCouleur = $('#commandes_fidCouleur');
        monSelectCouleur.on('change', function () {
            $('#remplissageCadreCouleur').attr('src', "{{ asset('bundles/ortho/img/couleurs/') }}" + monSelectCouleur.val() + ".png");
        });


        var monSelectMotif = $('#commandes_fidMotif');
        monSelectMotif.on('change', function () {
            $('#remplissageCadreMotif').attr('src', "{{ asset('bundles/ortho/img/motifs/') }}" + monSelectMotif.val() + ".png");
        });


        // Liste des adjonctions + Affichage des commentaires dans le cadre
        var tableauCommentaireAdjonction = {
        {% for commentaire in commentaireAdjonction %}
        {{ commentaire['id'] }} :
        "{{ commentaire['titreAdj'] }}({{ commentaire['familleAdj'] }}) : \n{{ commentaire['commentairesAdj'] }}" ,
        {% endfor %}
        }

        var commentAppareil = $('#appCommentInter');
        var checkboxesAdjonctions = $('div#commandes_fidAdj input[type=checkbox]');

        checkboxesAdjonctions.on('click', function () {
            if ($(this).prop('checked')) {
                commentAppareil.append('<div class="commentaireClass" id="commentaireEnfant' + $(this).val() + '">' + tableauCommentaireAdjonction[$(this).val()] + '</div>');
            }
            else {
                $('#commentaireEnfant' + $(this).val()).remove();
            }

            $('#commandes_comment').html('');

            $('.commentaireClass').each(function () {
                $('#commandes_comment').append($(this).html() + "\n");
            });
        });


        var monSelectCouleur = $('#commandes_fidCouleur');
        monSelectCouleur.on('change', function () {
            $('#remplissageCadreCouleur').attr('src', "{{ asset('bundles/ortho/img/couleurs/') }}" + monSelectCouleur.val() + ".png");
        });

        var monSelectMotif = $('#commandes_fidMotif');
        monSelectMotif.on('change', function () {
            $('#remplissageCadreMotif').attr('src', "{{ asset('bundles/ortho/img/motifs/') }}" + monSelectMotif.val() + ".png");
        });


        //jQuery time
        var current_fs, next_fs, previous_fs; //fieldsets
        var left, opacity, scale; //fieldset properties which we will animate
        var animating; //flag to prevent quick multi-click glitches

        $(".next").click(function () {
            if (animating) return false;
            animating = true;

            current_fs = $(this).parent();
            next_fs = $(this).parent().next();

            //activate next step on progressbar using the index of next_fs
            $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");

            //show the next fieldset
            next_fs.show();
            //hide the current fieldset with style
            current_fs.animate({opacity: 0}, {
                step: function (now, mx) {
                    //as the opacity of current_fs reduces to 0 - stored in "now"
                    //1. scale current_fs down to 80%
                    scale = 1 - (1 - now) * 0.2;
                    //2. bring next_fs from the right(50%)
                    left = (now * 50) + "%";
                    //3. increase opacity of next_fs to 1 as it moves in
                    opacity = 1 - now;
                    current_fs.css({'transform': 'scale(' + scale + ')'});
                    next_fs.css({'left': left, 'opacity': opacity});
                },
                duration: 800,
                complete: function () {
                    current_fs.hide();
                    animating = false;
                },
                //this comes from the custom easing plugin
                easing: 'easeInOutBack'
            });
        });

        $(".previous").click(function () {
            if (animating) return false;
            animating = true;

            current_fs = $(this).parent();
            previous_fs = $(this).parent().prev();

            //de-activate current step on progressbar
            $("#progressbar li").eq($("fieldset").index(current_fs)).removeClass("active");

            //show the previous fieldset
            previous_fs.show();
            //hide the current fieldset with style
            current_fs.animate({opacity: 0}, {
                step: function (now, mx) {
                    //as the opacity of current_fs reduces to 0 - stored in "now"
                    //1. scale previous_fs from 80% to 100%
                    scale = 0.8 + (1 - now) * 0.2;
                    //2. take current_fs to the right(50%) - from 0%
                    left = ((1 - now) * 50) + "%";
                    //3. increase opacity of previous_fs to 1 as it moves in
                    opacity = 1 - now;
                    current_fs.css({'left': left});
                    previous_fs.css({'transform': 'scale(' + scale + ')', 'opacity': opacity});
                },
                duration: 800,
                complete: function () {
                    current_fs.hide();
                    animating = false;
                },
                //this comes from the custom easing plugin
                easing: 'easeInOutBack'
            });
        });

        $(".submit").click(function () {
            return false;
        });

        $("#search").keyup(function() // A chaque levée d'une touche du clavier sur l'id search, on fera :
        {
            // Nouvelle regex qui comprend la valeur de l'input
            var myRegExp = new RegExp($(this).val(), 'i');

            $('.nomAppareillageEnfant').each(function(){ // Pour chaque élément qui a la classe citée, faire :

                // Si la vérification de la regex renvoie au minimum quelque chose, faire :
                if (($(this).html().match(myRegExp) || []).length != 0)
                {
                    // On affiche le bloc correspondant avec un effet slide
                    $(this).parent().parent().show('slide');
                }
                else // Sinon
                {
                    // On masque le bloc correspondant avec un effet slideOut
                    $(this).parent().parent().hide('slideOut');
                }
            });
        });
    </script>

    <script type="text/javascript">

        // On crée un Objet JS qui va contenir la liste de tout les appareils
        var appareillages = {
            {% for namepictures in nomimageapp %}
            "{{ namepictures.id }}" : {"title": "{{ namepictures.titreApp }}", "img": "{{ namepictures.imgApp }}", "family": "{{ namepictures.familleApp}}"},
            {% endfor %}
        };

        // Console.log de tests, à supprimer.
        console.log("Le gros Objet : Le tableau pas trié");
        console.log(appareillages); /* Renvoie l'intégralité de l'objet */
        console.log(Object.keys(appareillages).length); /* Renvoie sa longueur totale */

        $('.family-button').click(function(){ // Si l'élément avec la class="family-button" est cliqué, faire :

            var familyClicked = $(this).data('family'); // On récupère la donnée inscrite dans "data-family" (Voir ligne ...)

            // Console-log de test, à supprimer.
            console.log("Deux trois tests par-ci par-là");
            console.log("J'suis clicked."); // Juste pour vérifier que c'est bien clicked.
            console.log("La famille de ce que tu as cliqué est : " +familyClicked); // Renvoie "mob"
            console.log("La famille du premier appareillage est : " + appareillages[1].family); // Navigation dans le JSON -> Renvoie 'fix'

            var app = []; // On déclare notre tableau trié (vide pour le moment)

            // Tant que i inférieur à la longueur de l'objet, faire :
            for (i = 1; i < Object.keys(appareillages).length; i++)
            {
                // Si la famille de l'objet, à l'index [i] vaut la valeur de familyClicked, faire :
                if (appareillages[i].family === familyClicked)
                {
                    // On ajoute les données de cet appareillage dans le tableau trié.
                    app.push(appareillages[i]);
                }
            }

            // Console log de test, à supprimer par la suite
            console.log(app); // Renvoie l'intégralité du tableau trié
            console.log(app[0].title); // Renvoie le titre de l'app à l'index 0.

            // Pour chaque itération de boucle du tableau trié, faire :
            for (var compteur = 0; compteur < app.length; compteur++)
            {
                // On ajoute dans l'élément qui a pour id="images-app" :
                $('#images-app').append('' +
                    '<div class="col-xs-6">' +
                        '<button>' +
                            '<img src="' + app[compteur].img +'" title="Appareillages" alt="Appareillages" id="imageSchemaApp" name="commandes[appareillages]"/><br />' +
                            '<span class="nomAppareillageEnfant">' + app[compteur].title + '</span>' +
                        '</button>' +
                    '</div>'
                );
            }

        });
    </script>

    <script>
        $(function () {
            // quick search regex
            var qsRegex;
            // init Isotope
            var $grid = $('.grid').isotope({
                itemSelector: '.element-item',
                layoutMode: 'fitRows',
                filter: function () {
                    return qsRegex ? $(this).text().match(qsRegex) : true;
                }
            });
            // use value of search field to filter
            var $quicksearch = $('.quicksearch').keyup(debounce(function () {
                qsRegex = new RegExp($quicksearch.val(), 'gi');
                $grid.isotope();
            }, 200));
        });
        // debounce so filtering doesn't happen every millisecond
        function debounce(fn, threshold) {
            var timeout;
            return function debounced() {
                if (timeout) {
                    clearTimeout(timeout);
                }
                function delayed() {
                    fn();
                    timeout = null;
                }

                timeout = setTimeout(delayed, threshold || 100);
            }
        }
    </script>
{% endblock %}
